<?php

/**
 * Implements hook_menu().
 */
function amap_menu() {
    $items['admin/config/amap'] = array(
        'title' => 'AMap',
        'description' => "AMap global configuration.",
        'page callback' => 'drupal_get_form',
        'page arguments' => array('amap_admin_settings'),
        'access arguments' => array('administer site configuration'),
        'file' => 'amap.admin.inc',
        'type' => MENU_NORMAL_ITEM,
    );

    return $items;
}

/**
 * Implements hook_field_info().
 */
function amap_field_info() {
    $fields['field_amap'] = array(
        'label' => t('AMap field'),
        'description' => t('Select a location on AMap.'),
        'default_widget' => 'amap_field_widget',
        'default_formatter' => 'amap_field_formatter_default',
    );

    return $fields;
}

/**
 * Implements hook_field_widget_info().
 */
function amap_field_widget_info() {
    return array(
        'amap_field_widget' => array(
            'label' => t('AMap'),
            'field types' => array( 'field_amap' ),
        ),
    );
}

/**
 * Implements hook_field_widget_form().
 */
function amap_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $api_key = variable_get('amap_api_key', '');
  $form['#attached']['js'][] = 'http://webapi.amap.com/maps?v=1.3&plugin=AMap.ToolBar,AMap.Autocomplete&key=' . $api_key;

  $element['#title'] = t('AMap Field Settings');
  $element['#description'] = '<p>' . t('To set a location for the map, use the controls to zoom in or out and drag the map to find the correct area. Once you have found the correct location click that point to set the map.') . '</p>';

  $field_id = is_a($element['#entity'], 'FieldCollectionItemEntity') ? $element['#entity']->item_id : $field['id'];
  $field_id = empty($field_id) ? rand(10000000, 99999999) : $field_id;

  $element += array(
    '#type' => 'fieldset',
    // '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'amap') . '/js/amap_widget_form.js',
      ),
      'css' => array(
        drupal_get_path('module', 'amap') . '/css/amap.css',
      ),
    ),
  );

  $element['name'] = array(
    '#type' => 'textfield',
    '#title' => t('AMap Name'),
    '#default_value' => isset($items[$delta]['name']) ? $items[$delta]['name'] : NULL,
    '#prefix' => '<div><div class="clearfix"><div class="amap-coordinate">',
    '#attributes' => array(
      'data-name-delta' => $delta,
      'data-name-field-id' => $field_id,
    ),
  );
  $element['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Map description'),
    '#default_value' => isset($items[$delta]['description']) ? $items[$delta]['description'] : NULL,
    '#attributes' => array(
      'data-description-delta' => $delta,
      'data-description-field-id' => $field_id,
    ),
  );
  $element['lat'] = array(
    '#type' => 'textfield',
    '#title' => t('Latitude'),
    '#required' => $instance['required'],
    '#element_validate' => array('amap_latlng_validate'),
    '#default_value' => isset($items[$delta]['lat']) ? $items[$delta]['lat'] : 31.2304,
    '#attributes' => array(
      'data-lat-delta' => $delta,
      'data-lat-field-id' => $field_id,
    ),
  );
  $element['lng'] = array(
    '#type' => 'textfield',
    '#title' => t('Longitude'),
    '#required' => $instance['required'],
    '#element_validate' => array('amap_latlng_validate'),
    '#default_value' => isset($items[$delta]['lng']) ? $items[$delta]['lng'] : 121.4737,
    '#suffix' => '</div>',
    '#attributes' => array(
      'data-lng-delta' => $delta,
      'data-lng-field-id' => $field_id,
    ),
  );


  $element['map_preview'] = array(
    '#markup' => '<div class="amap-picker"><div class="amap-field-preview" id="amap-field-preview-'. $field_id. '-'. $delta .'" data-field-name="'. $field['field_name'] .'"  data-field-id="'. $field_id .'" data-delta="'. $delta .'"></div>',
  );

  $element['search'] = array(
    '#type' => 'textfield',
    '#title' => t('Search'),
    '#prefix' => '<div class="map-search">',
    '#suffix' => '</div></div></div></div>',
    '#attributes' => array(
      'placeholder' => t('Please add an address'),
      'data-search-delta' => $delta,
      'data-search-field-id' => $field_id,
      'data-search-field-name' => $field['field_name'],
    ),
  );

  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function amap_field_is_empty($item, $field) {
    if (empty($item['lat']) || empty($item['lng'])) {
        return TRUE;
    }
    return FALSE;
}

/**
 * Custom validation function for latitude/longitude fields.
 */
function amap_latlng_validate($element, $form, &$form_state) {
    if (!is_numeric($element['#value']) && !empty($element['#value'])) {
        $field = implode('][', $element['#array_parents']);
        form_set_error($field, t('Invalid value - @title', array( '@title' => $element['#title'] )));
    }
}

/** Validate width and height format (CSS property) */
function amap_width_height_validate($element, $form, &$form_state) {
    $regex = '!^\d+(?:px|%)$!';
    if(!preg_match($regex, $element['#value'])) {
        $field = implode('][', $element['#array_parents']);
        form_set_error($field, t('Invalid value - @title', array( '@title' => $element['#title'] )));
    }
}

/**
 * Implements hook_theme().
 */
function amap_theme($existing, $type, $theme, $path) {
    $themes['amap_picker'] = array(
        'template' => ''
    );

    $themes['amap_map'] = array(

    );

    return $themes;
}

/**
 * Implements hook_field_formatter_info().
 */
function amap_field_formatter_info()
{
    $formatters = array(
        'amap_field_formatter_default' => array(
            'label' => t('AMap'),
            'description' => t('Default display for AMap field.'),
            'field types' => array( 'field_amap' ),
            'settings' => array(
                'width' => '100%',
                'height' => '500px',
                'zoom' => 13
            )
        ),
    );

    return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function amap_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
    $display = $instance['display'][$view_mode];
    $settings = $display['settings'];

    $element = array();

    if ($display['type'] == 'amap_field_formatter_default') {
        $element['width'] = array(
            '#title' => t('Width'),
            '#type' => 'textfield',
            '#size' => 20,
            '#default_value' => $settings['width'],
            '#element_validate' => array('amap_width_height_validate'),
            '#required' => TRUE,
        );

        $element['height'] = array(
            '#title' => t('Height'),
            '#type' => 'textfield',
            '#size' => 20,
            '#default_value' => $settings['height'],
            '#element_validate' => array('amap_width_height_validate'),
            '#required' => TRUE,
        );

        $element['zoom'] = array(
            '#title' => t('Zoom'),
            '#type' => 'textfield',
            '#size' => 20,
            '#default_value' => $settings['zoom'],
            '#element_validate' => array('element_validate_integer_positive'),
            '#required' => TRUE,
        );
    }

    return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function amap_field_formatter_settings_summary($field, $instance, $view_mode) {
    $display = $instance['display'][$view_mode];
    $settings = $display['settings'];
    $summary = t('Use a @width x @height AMap with zoom @zoom', array(
        '@width'  => $settings['width'],
        '@height' => $settings['height'],
        '@zoom'   => $settings['zoom'],
    ));

    return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function amap_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
    $element = array();
    $settings = $display['settings'];

    switch ($display['type']) {
        case 'amap_field_formatter_default':
            if(count($items)) {
                $markers = array();
                foreach ($items as $delta => $item) {
                    $markers[] = array(
                        'name' => $item['name'],
                        'description' => $item['description'],
                        'lat' => $item['lat'],
                        'lng' => $item['lng'],
                    );
                }

                amap_require_js();
                $id = drupal_html_id('amap');
                $map_settings = array(
                    'map' => $settings,
                    'markers' => $markers,
                );
                $element[0] = array(
                    '#markup' => '<div id="' . $id . '"></div>',
                    '#attached' => array(
                        'js' => array(
                            drupal_get_path('module', 'amap') . '/js/amap.js',
                            array(
                                'data' => array('amap' => array($id => $map_settings)),
                                'type' => 'setting'
                            ),
                        )
                    )
                );
            }
            break;
    }

    return $element;
}

function amap_require_js() {
    $api_key = variable_get('amap_api_key', '');
    $url = 'http://webapi.amap.com/maps?v=1.3&plugin=AMap.ToolBar,AMap.Autocomplete&key=' . $api_key;

    drupal_add_js($url, 'external');
}